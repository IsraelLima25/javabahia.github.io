I"ü*<h2 id="id√©ia-e-motiva√ß√£o-do-artigo">Id√©ia e motiva√ß√£o do artigo</h2>

<p>Demonstrar a diferen√ßa entre anota√ß√µes que geralmente causam d√∫vidas em iniciantes 
e estudantes de desenvolvimento Java que querem utilizar o Hibernate Validator, implementa√ß√£o de refer√™ncia da <a href="https://beanvalidation.org/1.0/spec/" target="\_blank">JSR 303 ‚Äì Bean Validation API</a>.</p>

<h2 id="objetivo">Objetivo</h2>

<p>Mostrar aos desenvolvedores que utilizam a API Hibernate Validator, as diferen√ßas entre anota√ß√µes importantes da API, facilitando a melhor utiliza√ß√£o destas em seus projetos.
Pra quem esse artigo pode ser √∫til
Desenvolvedores que desejam aprender o conceito das valida√ß√µes NotNull, NotEmpty e NotBlank e como integr√°-las em suas aplica√ß√µes.</p>

<h3 id="sobre-o-bean-validation">Sobre o Bean Validation</h3>

<p>Bean Validation √© uma especifica√ß√£o que permite validar objetos com facilidade em diferentes camadas da aplica√ß√£o. 
As restri√ß√µes de Bean Validation s√£o em forma de anota√ß√µes, que est√£o dispon√≠veis no pacote javax.validation.constraints.
Veja um exemplo de implementa√ß√£o:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Carro</span> <span class="o">{</span>

   <span class="nd">@NotNull</span>
   <span class="kd">private</span> <span class="nc">String</span> <span class="n">fabricante</span><span class="o">;</span>

   <span class="nd">@NotEmpty</span>
   <span class="nd">@Size</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">14</span><span class="o">)</span>
   <span class="kd">private</span> <span class="nc">String</span> <span class="n">placa</span><span class="o">;</span>

   <span class="nd">@Min</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
   <span class="kd">private</span> <span class="kt">int</span> <span class="n">numeroDeAssentos</span><span class="o">;</span>

   <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>As anota√ß√µes geralmente s√£o bem intuitivas e autoexplicativas, como por exemplo:</p>

<p>@Max = Informa que o valor do campo ou propriedade deve ser um valor inteiro menor ou igual ao n√∫mero no elemento de valor.
@Min = De forma similar informa que √© esperado um valor inteiro maior ou igual ao n√∫mero no elemento de valor.
@Size = Se refere ao¬†tamanho do campo ou propriedade. Este deve corresponder aos limites especificados.
@Null = O valor do campo ou propriedade n√£o deve ser nulo‚Ä¶entre outras.
O Hibernate Validator ser√° a implementa√ß√£o da JSR que utilizaremos no exemplo, voc√™ pode ver mais detalhes na pr√≥pria <a href="https://docs.jboss.org/hibernate/validator/7.0/api/" target="\_blank">documenta√ß√£o da biblioteca</a>
Existem tr√™s anota√ß√µes que sempre me geravam d√∫vidas quanto a seus usos e diferen√ßas. E n√≥s vamos focar nelas a partir de agora.
@NotNull, @NotEmpty ou @NotBlank?
√â muito f√°cil imaginar que essas tr√™s anota√ß√µes possuem a mesma fun√ß√£o mas olhando na documenta√ß√£o do Hibernate Validator podemos entender as  diferen√ßas entre essas anota√ß√µes.
Primeiro temos que ter em mente que o  Java distingue entre String nulas e vazias.¬†Uma String vazia √© uma inst√¢ncia de String de comprimento zero, enquanto uma String nula, √© um objeto sem uma refer√™ncia de mem√≥ria.</p>

<p>String teste = null;
@NotNull: false
@NotEmpty: false
@NotBlank: false</p>

<p>Com isso em mente vamos falar da annotation @NotNull.</p>

<h3 id="notnull">@NotNull</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsuarioNotNull</span> <span class="o">{</span>

   <span class="nd">@NotNull</span><span class="o">(</span><span class="n">message</span> <span class="o">=</span> <span class="err">‚Äú</span><span class="no">O</span> <span class="n">campo</span> <span class="n">nome</span> <span class="n">n√£o</span> <span class="n">pode</span> <span class="n">ser</span> <span class="n">nulo</span><span class="err">‚Äù</span><span class="o">)</span>
   <span class="kd">private</span> <span class="nc">String</span> <span class="n">nome</span><span class="o">;</span>

   <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>Como bem expl√≠cito no nome, essa annotation n√£o permite que o valor seja nulo‚Ä¶ por√©m permite campos vazios. Parece incoerente mas lembra do que falei acima? 
Se olharmos a classe NotNullValidator vamos notar a implementa√ß√£o do m√©todo isValid() que tem a regra da valida√ß√£o:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">   <span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="nc">Object</span> <span class="n">object</span><span class="o">){</span>
	<span class="k">return</span> <span class="n">object</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
   <span class="o">}</span>
   </code></pre></figure>

<p>Como mostrado acima, o m√©todo verifica apenas se o objeto √© diferente de null, e vazio √© diferente de null, pois existe uma refer√™ncia de mem√≥ria. Nesse caso, vazio seria um valor considerado v√°lido.</p>

<p>String teste = ‚Äú‚Äù;
@NotNull: true
@NotEmpty: false
@NotBlank: false</p>

<p>Vamos avan√ßar e falar um pouco sobre a annotation @NotEmpty.</p>

<h3 id="notempty">@NotEmpty</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsuarioNotEmpty</span> <span class="o">{</span>

   <span class="nd">@NotEmpty</span><span class="o">(</span><span class="n">message</span> <span class="o">=</span> <span class="err">‚Äú</span><span class="no">O</span> <span class="n">campo</span> <span class="n">nome</span> <span class="n">n√£o</span> <span class="n">pode</span> <span class="n">ser</span> <span class="n">vazio</span><span class="err">‚Äù</span><span class="o">)</span>
   <span class="kd">private</span> <span class="nc">String</span> <span class="n">nome</span><span class="o">;</span>

   <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>Um ponto importante aqui √© que a¬†anota√ß√£o¬†@NotEmpty¬†faz uso da¬†implementa√ß√£o da¬†classe¬†@NotNull¬†¬†isValid(). Por√©m existe um adendo. 
Essa annotation tamb√©m verifica se o tamanho do objeto fornecido √© maior que zero. Dessa forma, se passarmos um ‚Äúespa√ßo‚Äù (‚Äú ‚Äú) como valor ao parametro, a annotation ir√° considerar como um valor v√°lido. Afinal um ‚Äúespa√ßo‚Äù n√£o √© nulo e possui tamanho maior que zero. Neste caso:</p>

<p>String teste = ‚Äú‚Äù;
@NotNull: true
@NotEmpty: true
@NotBlank: false</p>

<p>** Se quisermos ser ainda mais restritivos, podemos usar a anota√ß√£o @NotEmpty em conjunto com @Size.
@NotEmpty(message = ‚ÄúO campo nome n√£o pode ser vazio‚Äù)
@Size(min = 2, max = 32, message = ‚ÄúO campo nome deve ter entre 2 e 32 caracteres‚Äù)
private String nome;</p>

<h3 id="notblank">@NotBlank</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsuarioNotBlank</span> <span class="o">{</span>

   <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">message</span> <span class="o">=</span> <span class="err">‚Äú</span><span class="no">O</span> <span class="n">campo</span> <span class="n">nome</span> <span class="n">n√£o</span> <span class="n">pode</span> <span class="n">estar</span> <span class="n">em</span> <span class="n">branco</span><span class="err">‚Äù</span><span class="o">)</span>
   <span class="kd">private</span> <span class="nc">String</span> <span class="n">nome</span><span class="o">;</span>

   <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>A annotation @NotBlank faz a mesma verifica√ß√£o que NotNull e NotEmpty (se o objeto √© diferente de null) , por√©m diferente da verifica√ß√£o feita por NotEmpty, aqui √© utilizado o m√©todo trim() na verifica√ß√£o da String, apagando assim os espa√ßos em branco na verifica√ß√£o do tamanho do valor. Podemos ver isso pelo m√©todo isValid() da classe NotBlankValidator.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="nc">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span>
<span class="nc">ConstrainValidatorContext</span> <span class="n">constrainValidatorContext</span><span class="o">){</span>
	<span class="nc">If</span><span class="o">(</span><span class="n">charSequence</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
		<span class="k">return</span> <span class="n">object</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
  	 <span class="o">}</span>
	<span class="k">return</span> <span class="n">charSequence</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p>Sendo assim espa√ßos em branco n√£o s√£o levados em conta.
String nome = ‚ÄúJava Bahia‚Äù;
@NotNull: true
@NotEmpty: true
@NotBlank: true</p>

<h2 id="conclus√£o">Conclus√£o</h2>

<p>Esse artigo mostrou que embora essas anota√ß√µes aparentem ter a mesma finalidade, elas possuem propostas diferentes de verifica√ß√£o. Vamos resumir?</p>
<ul>
  <li>@NotNull: N√£o permite um valor nulo, por√©m permite um valor vazio.</li>
  <li>@NotEmpty: Assim como  a @NotNull, n√£o permite valor nulo e al√©m disso seu tamanho deve ser maior que zero. Espa√ßos em brancos s√£o levados em conta na verifica√ß√£o de tamanho do valor.</li>
  <li>@NotBlank: Assim como a @NotEmpty, n√£o permite valor nulo e o comprimento (sem considerar espa√ßos em branco) deve ser maior que zero.</li>
</ul>

<p>Sendo assim para validar um campo String de preenchimento obrigat√≥rio, n√£o vazio, √© indicado o uso de @NotBlank.</p>

<h2 id="montival-junior-estudante-desenvolvimento-java">Montival Junior (Estudante Desenvolvimento Java):</h2>
<ul>
  <li><a href="https://github.com/MonthAlcantara">Github</a></li>
  <li><a href="https://www.linkedin.com/in/montivaljunior">Linkedin</a></li>
  <li><a href="[https://monthalcantara.github.io/">Blog Pessoal</a></li>
</ul>
:ET