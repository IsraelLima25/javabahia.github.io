I"·V<h2 id="sistema-de-versionamento-atual-do-java-lts-x-non-lts">Sistema de versionamento atual do Java (LTS x Non-LTS)</h2>

<p>As pessoas seguem batendo na tecla reclamando do Java informando que √© uma linguagem verbosa, antiga e volta e meia ouvimos que o ‚ÄúJava morreu‚Äù. Entretanto, Java, vai al√©m de uma simples linguagem de programa√ß√£o, O Java criou um ecosistema robusto e maduro de desenvolvimento que bem ou mal, diversas plataformas e linguagens caminham para desenvolver o mesmo tipo de estrutura.</p>

<p>Um comit√™ para definir a evolu√ß√£o da linguagem (JCP), sistema de gerenciador de depend√™ncias (MAVEN, depois veio gradle e Ivy), padr√µes de codifica√ß√£o (code style), flexibilidade para cria√ß√£o de frameworks (in√≠cio do desenvolvimento) e at√© a consolida√ß√£o de especifica√ß√µes que definem padr√µes de implementa√ß√µes para frameworks que surjam dentro da plataforma. Essas, ao meu ver, s√£o algumas das contribui√ß√µes das comunidades e do ecossistema Java que observo em outras linguagens. N√£o quero dizer com isso, que Java inventou isso, mas tudo que aprendi foi no Java e vejo hoje algumas linguagens lan√ßando isso, depois de tantos anos de uso.</p>

<table>
  <tbody>
    <tr>
      <td>Vers√£o</td>
      <td>Lan√ßamento</td>
      <td>Fim do suporte p√∫blico</td>
    </tr>
    <tr>
      <td>JDK Beta</td>
      <td>1995</td>
      <td>?</td>
    </tr>
    <tr>
      <td>JDK 1.0</td>
      <td>01/1996</td>
      <td>?</td>
    </tr>
    <tr>
      <td>JDK 1.1</td>
      <td>02/1997</td>
      <td>?</td>
    </tr>
    <tr>
      <td>J2SE 1.2</td>
      <td>12/1998</td>
      <td>?</td>
    </tr>
    <tr>
      <td>J2SE 1.3</td>
      <td>05/2000</td>
      <td>?</td>
    </tr>
    <tr>
      <td>J2SE 1.4</td>
      <td>02/2002</td>
      <td>10/2008</td>
    </tr>
    <tr>
      <td>J2SE 5.0</td>
      <td>09/2004</td>
      <td>11/2009</td>
    </tr>
    <tr>
      <td>Java SE 6.0</td>
      <td>12/2006</td>
      <td>04/2013</td>
    </tr>
    <tr>
      <td>Java SE 7.0</td>
      <td>07/2011</td>
      <td>04/2015</td>
    </tr>
    <tr>
      <td>Java SE 8.0 (LTS)</td>
      <td>03/2014</td>
      <td>01/2019 Vers√£o da JDK da Oracle 05/2026 AdoptOpenk JDK 06/2023 Amazon Correto</td>
    </tr>
    <tr>
      <td>Java SE 9.0</td>
      <td>09/2017</td>
      <td>03/2018</td>
    </tr>
    <tr>
      <td>Java SE 10.0</td>
      <td>03/2018</td>
      <td>09/2018</td>
    </tr>
    <tr>
      <td>Java SE 11.0 (LTS)</td>
      <td>09/2018</td>
      <td>10/2024 AdoptOpenk JDK 08/2024 Amazon Correto</td>
    </tr>
    <tr>
      <td>Java SE 12.0</td>
      <td>03/2019</td>
      <td>09/2019</td>
    </tr>
    <tr>
      <td>Java SE 13.0</td>
      <td>09/2019</td>
      <td>03/2020</td>
    </tr>
    <tr>
      <td>Java SE 14.0 (ATUAL)</td>
      <td>03/2020</td>
      <td>09/2021</td>
    </tr>
    <tr>
      <td>Java SE 15.0</td>
      <td>09/2020</td>
      <td>03/2021</td>
    </tr>
    <tr>
      <td>Java SE 16.0</td>
      <td>03/2021</td>
      <td>09/2021</td>
    </tr>
    <tr>
      <td>Java SE 17.0 (LTS)</td>
      <td>09/2021</td>
      <td>N√£o definido</td>
    </tr>
  </tbody>
</table>

<p>Antes do lan√ßamento das releases semestrais, O Java teve ciclos de lan√ßamentos irregular e muito longo pra uma plataforma de tecnologia, como se pode observar com releases demorando anos para serem atualizadas. A partir da vers√£o 8.0, houve uma mudan√ßa estrutura e na forma de fazer a gest√£o do Java.</p>

<p>O documento ‚ÄúJava is Still Free‚Äù que pode ser lido 
<a download="Java Is Still Free (PT-BR).pdf" href="/img/docs/Java-Is-Still-Free-(PT-BR).pdf" title="Java Is Still Free (PT-BR).pdf">
    aqui, 
</a>
explica o que mudou e que as vezes gera confus√£o na cabe√ßa das pessoas sobre a gratuidade ou n√£o do Java.</p>

<p>Deve se observar com bastante cautela a quest√£o das releases n√£o LTS (Long-Term-Support) para ambientes produtivos, porque o tempo de suporte a essa release √© at√© o pr√≥ximo lan√ßamento. <a href="https://www.baeldung.com/java-time-based-releases" target="\_blank">Esse artigo do Baldeung, apresenta de maneira bem did√°tica sobre como funciona esse novo modelo.</a></p>

<p>O java Evolui a partir de JEPs, que s√£o JDK Enhancement Proposal e podem ser entendida na especifica√ß√£o como <a href="http://openjdk.java.net/jeps/1" target="\_blank">JEP 1</a>.</p>

<p>A <a href="http://openjdk.java.net/jeps/2" target="\_blank">JEP 2</a>, define o template de escrita de propostas e a <a href="http://openjdk.java.net/jeps/3" target="\_blank">JEP 3</a>, descreve o processo de release do JDK</p>

<h2 id="explicado-o-modelo-vamos-ao-java-14">Explicado o modelo, vamos ao Java 14</h2>

<p>Extra√≠do de um post da Oracle, referenciado na se√ß√£o de refer√™ncias, trago aqui algumas informa√ß√µes sobre o Java 14.</p>

<h3 id="java-14-juntos">Java 14, juntos</h3>
<p>Similar ao Java 11, Java 12 e Java 13, celebra as contribui√ß√µes feitas ao Java 14 por v√°rios indiv√≠duos e organiza√ß√µes da Comunidade do OpenJDK ‚Äî todos compilaram Java, juntos!</p>

<h3 id="√≠ndice-de-corre√ß√£o-do-jdk-14">√çndice de corre√ß√£o do JDK 14</h3>
<p>O √≠ndice geral de altera√ß√µes no JDK ao longo do tempo permaneceu essencialmente constante por muitos anos, mas, na cad√™ncia de seis meses, o ritmo em que inova√ß√µes prontas para produ√ß√£o s√£o entregues melhorou imensamente. Em vez de se disponibilizarem dezenas de milhares de corre√ß√µes e cerca de cem JDK Enhancement Proposals (JEPs) dispon√≠veis em um grande lan√ßamento a cada poucos anos, os aperfei√ßoamentos s√£o fornecidos em vers√µes menores de recursos em um cronograma de seis meses, mais gerenci√°vel e previs√≠vel. Essas altera√ß√µes podem variar de um recurso significativo a pequenos aprimoramentos e manuten√ß√£o de rotina, corre√ß√£o de bugs e melhorias na documenta√ß√£o. Cada altera√ß√£o √© representada em um √∫nico commit para um √∫nico problema no JDK Bug System.</p>

<h3 id="novidades-no-java-14">Novidades no Java 14</h3>

<p>O Java 14 oferece aos usu√°rios dezesseis aperfei√ßoamentos/altera√ß√µes principais, que incluem dois m√≥dulos incubadores, tr√™s recursos em vers√£o pr√©via, dois recursos preteridos e duas remo√ß√µes.</p>

<p>Os 16 JEPs fornecidos com o JDK 14 s√£o:</p>

<h4 id="1-jep-305---pattern-matching-for-instanceof-preview">1. JEP 305 - Pattern Matching for instanceof (Preview)</h4>

<p>Este recurso em vers√£o pr√©via melhora o Java com correspond√™ncia de padr√£o para o operador instanceof.  Isso melhora a produtividade do desenvolvedor ao eliminar a necessidade de c√≥digo padr√£o e permite c√≥digo fortemente tipado mais conciso.</p>

<h4 id="2-jep-343---packaging-tool-incubator">2. JEP 343 - Packaging Tool (Incubator)</h4>

<p>Esta ferramenta incubadora fornece uma forma para desenvolvedores empacotarem aplicativos Java para distribui√ß√£o em formatos espec√≠ficos da plataforma.  A ferramenta ajuda desenvolvedores com aplicativos modernos em que limita√ß√µes requerem que tempos de execu√ß√£o e aplicativos sejam empacotados em uma √∫nica entrega.</p>

<h4 id="3-jep-345---numa-aware-memory-allocation-for-g1">3. JEP 345 - NUMA-Aware Memory Allocation for G1</h4>

<p>Este recurso melhora o desempenho geral do coletor de lixo G1 em sistemas de acesso n√£o uniforme √† mem√≥ria NUMA).</p>

<h4 id="4-jep-349---jfr-event-streaming">4. JEP 349 - JFR Event Streaming</h4>

<p>Este recurso exp√µe dados do JDK Flight Recorder (JFR) para monitoramento cont√≠nuo, o que simplificar√° o acesso a dados do JFR a v√°rias ferramentas e aplicativos.</p>

<h4 id="5-jep-352---non-volatile-mapped-byte-buffers">5. JEP 352 - Non-Volatile Mapped Byte Buffers</h4>

<p>Este recurso adiciona um modo de mapeamento de arquivos para o JDK quando se usa mem√≥ria n√£o vol√°til.  A natureza persistente da mem√≥ria n√£o vol√°til altera muitos pressupostos de persist√™ncia e desempenho que podem ser aproveitados com este recurso.</p>

<h4 id="6-jep-358---helpful-nullpointerexceptions">6. JEP 358 - Helpful NullPointerExceptions</h4>

<p>Este recurso melhora a usabilidade de NullPointerExceptions ao descrever precisamente qual vari√°vel era nula e outras informa√ß√µes √∫teis.  Isso melhorar√° a produtividade de desenvolvedor e a qualidade de muitas ferramentas de desenvolvimento e de depura√ß√£o.</p>

<h4 id="7-jep-359---records-preview">7. JEP 359 - Records (Preview)</h4>

<p>Este recurso em vers√£o pr√©via fornece uma sintaxe compacta para declarar classes que cont√™m dados superficialmente imut√°veis.  Superficialmente, este √≥timo recurso reduz muito c√≥digos padronizados em classes deste tipo, mas, em √∫ltima an√°lise, o objetivo √© permitir uma melhor modelagem de dados como dados.  Declarar agregados de dados nominais superficialmente imut√°veis deve ser f√°cil, claro e conciso.</p>

<h4 id="8-jep-361---switch-expressions">8. JEP 361 - Switch Expressions</h4>

<p>Este era um recurso em vers√£o pr√©via no JDK 12 e no JDK 13 e agora est√° conclu√≠do.  Ele permite que switch seja usado tanto como uma instru√ß√£o quanto como uma express√£o.  Este recurso simplifica a codifica√ß√£o cotidiana e preparou o caminho para o recurso de correspond√™ncia de padr√£o (JEP 305) incorporado como vers√£o pr√©via nesta vers√£o.</p>

<h4 id="9-jep-362---deprecate-the-solaris-and-sparc-ports">9. JEP 362 - Deprecate the Solaris and SPARC Ports</h4>

<p>Este JEP substitui as portas Solaris e SPARC com o objetivo de remov√™-las em uma vers√£o futura.</p>

<h4 id="10-jep-363---remove-the-concurrent-mark-sweep-cms-garbage-collector">10. JEP 363 - Remove the Concurrent Mark Sweep (CMS) Garbage Collector</h4>

<p>O coletor de lixo de CMS foi dispensado h√° dois anos e o G1, que √© o sucessor pretendido da CMS desde o JDK 6, tem sido o coletor padr√£o usado em larga escala h√° muitos anos.  Tamb√©m vimos a introdu√ß√£o de dois novos coletores, ZGC e Shenandoah, com muitos aperfei√ßoamentos no G1 no mesmo per√≠odo.</p>

<h4 id="11-jep-364---zgc-on-macos">11. JEP 364 - ZGC on macOS</h4>

<p>Embora a maioria dos usu√°rios que precisam do ZGC tamb√©m precisem da escalabilidade de ambientes baseados em Linux, ele tamb√©m √© frequentemente necess√°rio para desenvolvimento e teste em Windows e macOS.  Tamb√©m h√° certos aplicativos de √°rea de trabalho que se beneficiar√£o das capacidades do ZGC.  Portanto, o recurso ZGC foi transferido para o Windows e o macOS.</p>

<h4 id="12-jep-365---zgc-on-windows">12. JEP 365 - ZGC on Windows</h4>

<p>Consulte o resumo do JEP 364.</p>

<h4 id="13-jep-366---deprecate-the-parallelscavenge--serialold-gc-combination">13. JEP 366 - Deprecate the ParallelScavenge + SerialOld GC Combination</h4>

<p>Este dispensa a combina√ß√£o dos algoritmos Parallel Scavenge e Serial Old, que √© raramente usada, com a inten√ß√£o de remov√™-la em uma vers√£o futura.</p>

<h4 id="14-jep-367---remove-the-pack200-tools-and-api">14. JEP 367 - Remove the Pack200 Tools and API</h4>

<p>Este remove as ferramentas pack200 e unpack200 e a API Pack200 no pacote java.util.jar. Essas ferramentas e API foram dispensadas para remo√ß√£o no Java SE 11.</p>

<h4 id="15-jep-368---text-blocks-second-preview">15. JEP 368 - Text Blocks (Second Preview)</h4>

<p>Ap√≥s receber feedback quando Text Blocks foi introduzido como um recurso em vers√£o pr√©via (JEP 355) como parte do Java 13, duas novas sequ√™ncias de escape foram adicionadas e Text Blocks est√° sendo oferecido como um recurso em vers√£o pr√©via pela segunda vez. Os benef√≠cios do recurso Text Blocks incluem: escrita simplificada de programas usando cadeias de caracteres que abrangem v√°rias linhas de c√≥digo-fonte, ao mesmo tempo em que evita sequ√™ncias de escape em casos comuns; legibilidade aprimorada de cadeias de caracteres em programas Java que denotam c√≥digo escrito em linguagens n√£o Java; suporta a migra√ß√£o de cadeia de caracteres literais ao estipular que qualquer novo constructo pode expressar o mesmo conjunto de cadeias de caracteres que uma cadeia de caracteres literal, interpretar as mesmas sequ√™ncias de escape e ser manipuladas das mesmas formas que um cadeia de caracteres literal.</p>

<h4 id="16jep-370---foreign-memory-access-api-incubator">16.JEP 370 - Foreign-Memory Access API (Incubator)</h4>

<p>Este m√≥dulo incubador introduz uma API para permitir que programas Java acessem mem√≥ria externa fora do heap Java de maneira segura e eficiente.</p>

<h3 id="suporte-a-ferramentas">Suporte a ferramentas</h3>

<p>O suporte corrente e atualizado a ferramentas ajuda a aumentar a produtividade do desenvolvedor.  Com o Java 14, continuamos a acolher os esfor√ßos de fornecedores l√≠deres de IDE cujas solu√ß√µes de ferramentas oferecem aos desenvolvedores suporte para as vers√µes atuais do Java.  Os desenvolvedores podem esperar receber o suporte ao Java 14 com os seguintes IDEs:</p>

<ol>
  <li><a href="https://blog.jetbrains.com/idea/2020/03/java-14-and-intellij-idea/?source=:ow:evp:cpo:::rc_lamk200615p00076:oer400070758,:ow:lp:cpo::" target="\_blank">JetBrains IDEA</a></li>
  <li><a href="https://netbeans.apache.org/download/nb113/index.html?source=:ow:evp:cpo:::rc_lamk200615p00076:oer400070758,:ow:lp:cpo::" target="\_blank">Apache NetBeans</a></li>
  <li><a href="https://marketplace.eclipse.org/content/java-14-support-eclipse-2020-03-415/help?source=:ow:evp:cpo:::rc_lamk200615p00076:oer400070758,:ow:lp:cpo::" target="\_blank">Eclipse IDE</a></li>
</ol>

<h4 id="download-jdk">Download JDK</h4>

<p>Pode ser baixada nesse <a href="https://jdk.java.net/14/?source=:ow:evp:cpo:::rc_lamk200615p00076:oer400070758,:ow:lp:cpo::" target="\_blank">link.</a>. Recomendo fortemente a utiliza√ß√£o do SDK Man como ferramenta de gest√£o de JDK em sua m√°quina. <a href="https://sdkman.io/" target="\_blank">Link para instala√ß√£o e configura√ß√£o</a>.</p>

<h4 id="recurso-mais-expressivo">Recurso mais expressivo</h4>

<p><a href="https://blogs.oracle.com/oracle-brasil/java-14-torna-codigo-super-expressivo-dizem-desenvolvedores?source=:ow:evp:cpo:::RC_LAMK200615P00076:OER400070758&amp;intcmp=:ow:evp:cpo:::RC_LAMK200615P00076:OER400070758&amp;elqTrackId=e69482bb6fd0429bb1697f3ec9b22fc3&amp;elqaid=96279&amp;elqat=2&amp;source=:ow:lp:cpo::" target="\_blank">Nesse artigo</a>, √© poss√≠vel obter a opini√£o de especialistas renomados, inclusive o Dr Venkat Subramaniam, autor premiado e fundador da Agile Developer, que veio ao Brasil e a Salvador no ano passado.</p>

<p>Vejam o que ele diz: ‚Äú<strong>Eu sou uma daquelas pessoas que vivem reclamando que o Java √© detalhado demais‚Äù, diz Venkat Subramaniam, autor premiado e fundador da Agile Developer. Embora as ferramentas de edi√ß√£o de c√≥digo (IDEs) aliviem esse fardo ao produzir automaticamente algumas instru√ß√µes no c√≥digo-fonte, diz ele, elas podem produzir o que os desenvolvedores chamam pejorativamente de ‚Äúv√¥mitos de c√≥digo</strong></p>

<p>√â por esse motivo que h√° um esfor√ßo cont√≠nuo, com o ciclo de lan√ßamento a cada seis meses, para simplificar a linguagem, removendo o excesso de detalhes e reduzindo os recursos obsoletos. ‚Äú<strong>O Java 14 remove muito ru√≠do no c√≥digo‚Äù, diz Subramaniam, apontando para os recursos Records,  Pattern Matching e Switch Expressions. (Switch Expressions foi lan√ßado pela primeira vez no JDK 12). Esses recursos removem o c√≥digo clich√™ e tornam o c√≥digo altamente expressivo e intuitivo‚Äîf√°cil de escrever e manter.</strong>‚Äù</p>

<h2 id="conclus√£o">Conclus√£o</h2>

<p>Por fim, para dar dimens√£o da grandeza do Java e sua utiliza√ß√£o, separei alguns projetos Java de grande relev√¢ncia do artigo especial da Oracle sobre os melhores aplicativos Java j√° escritos.</p>

<h3 id="maestro-controlador-de-rovers-em-marte">Maestro, controlador de rovers em Marte.</h3>

<p>Em 2004, o Java se tornou a primeira linguagem de programa√ß√£o a expandir o alcance planet√°rio da humanidade. Durante tr√™s meses naquele ano, cientistas que trabalhavam no Laborat√≥rio de Propuls√£o a Jato (JPL, Jet Propulsion Laboratory) da NASA em Pasadena, Calif√≥rnia, usaram o sistema Maestro Science Activity Planner em Java, constru√≠do pela equipe de interface de rob√¥s do JPL, para controlar o rover Spirit em suas explora√ß√µes pelo planeta vermelho. A experi√™ncia com Java havia come√ßado muitos anos antes no JPL, com a cria√ß√£o de um sistema de comando e controle para o rover Sojourner de 1995. O fundador do Java, James Gosling, passou tanto tempo no JPL que se tornou membro do conselho consultivo.</p>

<h3 id="wikipedia-search">Wikipedia Search.</h3>

<p>Faz sentido que uma enciclop√©dia criada para as pessoas e pelas pessoas seja executada em software de c√≥digo aberto ‚Äî e ofere√ßa um mecanismo de pesquisa desenvolvido em Java. O Lucene, escrito por Doug Cutting em 1999 e batizado com o nome do meio de sua esposa, era na verdade o quinto mecanismo de pesquisa desenvolvido por Cutting. Ele criou os outros como engenheiro para a Xerox PARC, Apple e Excite. Em 2014, a Wikipedia substituiu o Lucene pelo Elasticsearch, um mecanismo de pesquisa distribu√≠do, habilitado por REST e tamb√©m escrito em Java.</p>

<h3 id="hadoop">Hadoop.</h3>

<p>O Lucene n√£o √© a √∫nica contribui√ß√£o de Cutting para a nossa lista. Inspirado em um artigo de pesquisa da Google que descreve o algoritmo MapReduce para processamento de dados em grandes clusters de computadores convencionais, em 2003 Cutting escreveu uma estrutura de c√≥digo aberto para opera√ß√µes do MapReduce em Java e a chamou de Hadoop, em homenagem ao elefante de brinquedo de seu filho. O Hadoop 1.0 foi lan√ßado em 2006, impulsionando a tend√™ncia do big data e inspirando muitas empresas a criar ‚Äúdata lakes‚Äù, definir estrat√©gias para analisar os ‚Äúdados de exaust√£o‚Äù e considerar os dados como ‚Äúo novo petr√≥leo‚Äù. Em 2008, o Yahoo (onde Cutting trabalhava na √©poca) alegou que seu Search Webmap, executado em um cluster Linux com 10 mil n√∫cleos, era o maior aplicativo Hadoop de produ√ß√£o do mundo. Em 2012, o Facebook afirmou ter mais de 100 petabytes de dados no maior cluster Hadoop do mundo.</p>

<h3 id="minecraft">Minecraft.</h3>

<p>O ambiente pac√≠fico desse jogo ‚Äî com biomas, pessoas e casas que voc√™ mesmo constr√≥i usando blocos de constru√ß√£o ‚Äî mant√©m crian√ßas e adultos do mundo todo em um estado prolongado de fascina√ß√£o, o que faz dele o videogame mais popular da hist√≥ria. Desenvolvido em Java por Markus ‚ÄúNotch‚Äù Persson e lan√ßado em vers√£o alfa em 2009, o Minecraft e seu universo 3D s√£o uma fonte inesgot√°vel de criatividade, porque n√£o h√° dois mundos criados que sejam iguais. O uso de Java pelo videogame tamb√©m permite que programadores, em casa e na escola, criem seus pr√≥prios mods.</p>

<h3 id="jenkins">Jenkins.</h3>

<p>Criado em 2004 por Kohsuke Kawaguchi, engenheiro da Sun Microsystems, o Jenkins √© um poderoso servidor de integra√ß√£o cont√≠nua de c√≥digo aberto. Escrito em Java, o Jenkins ajuda a criar, testar e implantar aplicativos de maneira r√°pida e autom√°tica. Ele costuma ser reconhecido como uma das primeiras ferramentas de DevOps que possibilitaram a ‚Äúinfraestrutura como c√≥digo‚Äù. O Jenkins e seus mais de 1.500 plugins criados pela comunidade d√£o conta de in√∫meras tarefas de implanta√ß√£o e teste, incluindo trabalhar com o GitHub, dar suporte a desenvolvedores dalt√¥nicos e fornecer um arquivo JAR do MySQL Connector.</p>

<h3 id="integrated-genome-browser">Integrated Genome Browser.</h3>

<p>A corrida para mapear o genoma humano come√ßou em 1990 e terminou 13 anos depois, quando pesquisadores m√©dicos conseguiram sequenciar os 3 bilh√µes de pares de bases de DNA do biotecn√≥logo Craig Venter, ap√≥s uma d√©cada de trabalho envolvendo 3 mil pessoas a um custo de 3 bilh√µes de d√≥lares. Quando o sequenciamento foi conclu√≠do, os cientistas ficaram ansiosos para mergulhar no c√≥digo fonte da nossa esp√©cie ‚Äî mas como? Entre no navegador de genoma baseado em Java, uma ferramenta de visualiza√ß√£o desenvolvida por uma equipe, que inclu√≠a a professora de bioinform√°tica Ann Loraine, para explorar os datasets b√°sicos e as anota√ß√µes dos genes de refer√™ncia. O c√≥digo aberto do Integrated Genome Browser permite que os pesquisadores aumentem e diminuam o zoom e representem graficamente os dados gen√¥micos, a fim de identificar e anotar caracter√≠sticas gen√©ticas. Em linha com essa iniciativa mundial, uma ferramenta semelhante foi desenvolvida na Universidade da Calif√≥rnia, em Santa Cruz, na forma do Genome Browser, gerenciado por Jim Kent.</p>

<h3 id="visible-tesla">Visible Tesla.</h3>

<p>Esse aplicativo escrito em Java foi criado por Joe Pasqua, um entusiasta dos autom√≥veis Tesla, em 2013 como um programa gratuito para monitorar e controlar seu Tesla Model S. O VisibleTesla, inspirado na comunidade do Tesla Motors Club, oferece recursos semelhantes aos encontrados no aplicativo m√≥vel oficial da montadora de carros el√©tricos. Os usu√°rios podem configurar cercas geogr√°ficas e notifica√ß√µes para eventos, como uma porta destrancada ou o estado da carga da bateria, al√©m de coletar e manipular dados de viagem. O c√≥digo aberto do projeto est√° no GitHub.</p>

<p>Quer saber um pouco mais do c√≥digo-fonte do JDK tem o <a href="https://github.com/openjdk/jdk">reposit√≥rio no Github</a>.</p>

<p>O que vem no JDK 15? Alguns artigos e o roadmap nos links abaixo:</p>

<ul>
  <li>https://openjdk.java.net/projects/jdk/15/</li>
  <li>https://www.infoworld.com/article/3534133/jdk-15-the-new-features-in-java-15.html</li>
  <li>https://www.techgeeknext.com/java/java15-features</li>
</ul>

<h2 id="referencias">Referencias</h2>

<ul>
  <li>https://blogs.oracle.com/oracle-brasil/o-java-14-chegou?source=:ow:evp:cpo:::RC_LAMK200615P00076:OER400070758&amp;intcmp=:ow:evp:cpo:::RC_LAMK200615P00076:OER400070758&amp;elqTrackId=900c3919f5ad4fa0aa8e09f032f04610&amp;elqaid=96279&amp;elqat=2&amp;source=:ow:lp:cpo::</li>
  <li>https://blogs.oracle.com/java-platform-group/the-arrival-of-java-14?source=:ow:evp:cpo:::rc_lamk200615p00076:oer400070758,:ow:lp:cpo::</li>
  <li>https://blogs.oracle.com/oracle-brasil/nosso-mundo-movido-a-java?source=:ow:evp:cpo:::rc_lamk200615p00076:oer400070758,:ow:lp:cpo::</li>
  <li>https://blog.ippon.tech/comparing-java-lts-releases/</li>
  <li></li>
</ul>
:ET